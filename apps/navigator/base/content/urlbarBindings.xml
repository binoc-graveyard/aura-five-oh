<?xml version="1.0"?>
<!-- This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->


<!DOCTYPE bindings [
  <!ENTITY % textcontextDTD SYSTEM "chrome://communicator/locale/utilityOverlay.dtd">
  %textcontextDTD;
  <!ENTITY % navigatorDTD SYSTEM "chrome://navigator/locale/navigator.dtd">
  %navigatorDTD;
]>

<bindings id="urlbarBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="urlbar" extends="chrome://global/content/bindings/autocomplete.xml#autocomplete">
    <content sizetopopup="pref">
      <xul:hbox class="autocomplete-textbox-container" flex="1">
        <xul:hbox class="urlbar-security-level" flex="1" align="center" xbl:inherits="level">
          <children includes="image|deck|stack|box">
            <xul:image class="autocomplete-icon" allowevents="true"/>
          </children>

          <xul:hbox class="textbox-input-box paste-and-go" flex="1" tooltip="_child" xbl:inherits="context">
            <children/>
            <html:input anonid="input" class="autocomplete-textbox textbox-input"
                        allowevents="true"
                        xbl:inherits="value,type,maxlength,disabled,size,readonly,placeholder,tabindex,accesskey,mozactionhint,userAction"/>
            <xul:tooltip anonid="tooltip"
                         onpopupshowing="document.getBindingParent(this)._showTooltip(event);"/>
          </xul:hbox>
          <children includes="hbox"/>
        </xul:hbox>
      </xul:hbox>

      <xul:dropmarker anonid="historydropmarker"
                      class="autocomplete-history-dropmarker"
                      context="ubhist-popup"
                      allowevents="true"
                      xbl:inherits="open,enablehistory,parentfocused=focused" />

      <xul:popupset anonid="popupset"
                    class="autocomplete-result-popupset"/>
    </content>

    <implementation implements="nsIDOMEventListener">
      <constructor><![CDATA[
        this.mPrefs.addObserver("browser.urlbar", this.mPrefObserver, false);

        this.updatePref("browser.urlbar.showPopup");
        this.updatePref("browser.urlbar.autoFill");
        this.updatePref("browser.urlbar.formatting.enabled");
        this.inputField.controllers.insertControllerAt(0, this._editItemsController);
        this.inputField.addEventListener("overflow", this, false);
        this.inputField.addEventListener("underflow", this, false);
      ]]></constructor>

      <destructor><![CDATA[
        this.inputField.removeEventListener("underflow", this, false);
        this.inputField.removeEventListener("overflow", this, false);
        this.inputField.controllers.removeController(this._editItemsController);
        this.mPrefs.removeObserver("browser.urlbar", this.mPrefObserver);
      ]]></destructor>

      <field name="mPrefs">
        var svc = Components.classes["@mozilla.org/preferences-service;1"]
                            .getService(Components.interfaces.nsIPrefService);
        svc.getBranch(null);
      </field>

      <field name="mPrefObserver"><![CDATA[
        ({
          urlbar: this,

          observe: function(aObserver, aBlah, aPref) {
            if (/^browser\.urlbar\./.test(aPref))
              this.urlbar.updatePref(aPref);
          }
        });
      ]]></field>

      <method name="updatePref">
        <parameter name="aPref"/>
        <body><![CDATA[
          if (aPref == "browser.urlbar.showPopup") {
            this.showPopup = this.mPrefs.getBoolPref(aPref);
          } else if (aPref == "browser.urlbar.autoFill") {
            this.autoFill = this.mPrefs.getBoolPref(aPref);
          } else if (aPref == "browser.urlbar.formatting.enabled") {
            this._formattingEnabled = this.mPrefs.getBoolPref(aPref);
            this._formatValue(this._formattingEnabled && !this.focused);
          }
        ]]></body>
      </method>

      <field name="_overflowing">false</field>

      <method name="handleEvent">
        <parameter name="aEvent"/>
        <body><![CDATA[
          switch (aEvent.type) {
            case "overflow":
              this._overflowing = true;
              break;
            case "underflow":
              this._overflowing = false;
              break;
          }
        ]]></body>
      </method>

      <method name="handleRevert">
        <body><![CDATA[
          var isScrolling = this.open;

          gBrowser.userTypedValue = null;

          // don't revert to last valid url unless page is NOT loading
          // and user is NOT key-scrolling through autocomplete list
          if (!XULBrowserWindow.isBusy && !isScrolling) {
            URLBarSetURI();

            // If the value isn't empty and the urlbar has focus, select the value.
            if (this.value && this.hasAttribute("focused"))
              this.select();
          }

          // tell widget to revert to last typed text only if the user
          // was scrolling when they hit escape
          return !isScrolling;
        ]]></body>
      </method>

      <method name="_showTooltip">
        <parameter name="aEvent"/>
        <body><![CDATA[
          var tooltip = aEvent.target;
          if (this._overflowing)
            tooltip.label = this.value;
          else if (this.value)
            tooltip.label = this.placeholder;
          else
            aEvent.preventDefault();
        ]]></body>
      </method>

      <field name="_formattingEnabled">true</field>

      <method name="_formatValue">
        <parameter name="formattingEnabled"/>
        <body><![CDATA[
          if (!this.editor)
            return;

          var controller = this.editor.selectionController;
          var selection = controller.getSelection(controller.SELECTION_URLSECONDARY);
          selection.removeAllRanges();
          if (!formattingEnabled)
            return;

          var textNode = this.editor.rootElement.firstChild;
          var value = textNode.textContent;

          var protocol = value.match(/^[a-z\d.+\-]+:(?=[^\d])/);
          if (protocol && !/^https?:|ftp:/.test(protocol[0]))
            return;
          var matchedURL = value.match(/^((?:[a-z]+:\/\/)?(?:[^\/]+@)?)(.+?)(?::\d+)?(?:\/|$)/);
          if (!matchedURL)
            return;

          var [, preDomain, domain] = matchedURL;
          var subDomain = "";
          // getBaseDomainFromHost doesn't recognize IPv6 literals in brackets as IPs (bug 667159)
          if (domain[0] != "[") {
            try {
              var baseDomain = Services.eTLD.getBaseDomainFromHost(domain);
              if (!domain.endsWith(baseDomain)) {
                // getBaseDomainFromHost converts its resultant to ACE.
                let IDNService = Components.classes["@mozilla.org/network/idn-service;1"]
                                           .getService(Components.interfaces.nsIIDNService);
                baseDomain = IDNService.convertACEtoUTF8(baseDomain);
              }
              if (baseDomain != domain) {
                subDomain = domain.slice(0, -baseDomain.length);
              }
            } catch (e) {}
          }

          var startLength = preDomain.length + subDomain.length;
          if (startLength) {
            var startRange = document.createRange();
            startRange.setStart(textNode, 0);
            startRange.setEnd(textNode, startLength);
            selection.addRange(startRange);
          }

          var endLength = preDomain.length + domain.length;
          if (endLength < value.length) {
            var endRange = document.createRange();
            endRange.setStart(textNode, endLength);
            endRange.setEnd(textNode, value.length);
            selection.addRange(endRange);
          }
        ]]></body>
      </method>

      <method name="autoFillInput">
        <parameter name="aSessionName"/>
        <parameter name="aResults"/>
        <parameter name="aUseFirstMatchIfNoDefault"/>
        <body><![CDATA[
          if (this.mInputElt.selectionEnd < this.currentSearchString.length ||
              this.mDefaultMatchFilled)
            return;

          if (!this.mFinishAfterSearch && this.autoFill &&
              this.mLastKeyCode != KeyEvent.DOM_VK_BACK_SPACE &&
              this.mLastKeyCode != KeyEvent.DOM_VK_DELETE) {
            var indexToUse = aResults.defaultItemIndex;
            if (aUseFirstMatchIfNoDefault && indexToUse == -1)
              indexToUse = 0;

            if (indexToUse != -1) {
              var result = this.getSessionValueAt(aSessionName, indexToUse);
              var entry = this.value;
              var suffix = "";
              if (/^ftp:\/\/ftp\b/.test(result) &&
                  result.lastIndexOf("ftp://" + entry, 0) == 0)
                suffix = result.slice(entry.length + 6);
              else if (!/^http:\/\/ftp\b/.test(result) &&
                       result.lastIndexOf("http://" + entry, 0) == 0)
                suffix = result.slice(entry.length + 7);
              else if (result.lastIndexOf(entry, 0) == 0)
                suffix = result.slice(entry.length);

              if (suffix) {
                this.setTextValue(this.value + suffix);
                this.mInputElt.setSelectionRange(entry.length, this.value.length);
                this.mDefaultMatchFilled = true;
              }
              this.mNeedToComplete = true;
            }
          }
        ]]></body>
      </method>

      <method name="_getSelectedValueForClipboard">
        <body>
          <![CDATA[
            var inputVal = this.inputField.value;
            var val = inputVal.substring(this.selectionStart, this.selectionEnd);

            /* If the entire value is selected and it's a valid non-javascript,
               non-data URI, encode it. */
            if (val == inputVal &&
                gProxyButton.getAttribute("pageproxystate") == "valid") {
              var uri;
              try {
                uri = makeURI(val);
              } catch (e) {}

              if (uri && !uri.schemeIs("javascript") && !uri.schemeIs("data")) {
                val = uri.spec;

                // Parentheses are known to confuse third-party applications (bug 458565).
                val = val.replace(/[()]/g, c => escape(c));
              }
            }

            return val;
          ]]>
        </body>
      </method>

      <field name="_editItemsController"><![CDATA[
        ({
          supportsCommand: function(aCommand) {
            switch (aCommand) {
              case "cmd_copy":
              case "cmd_cut":
              case "cmd_pasteAndGo":
                return true;
            }
            return false;
          },
          isCommandEnabled: function(aCommand) {
            var hasSelection = this.selectionStart < this.selectionEnd;
            switch (aCommand) {
              case "cmd_copy":
                return hasSelection;
              case "cmd_cut":
                return !this.readOnly && hasSelection;
              case "cmd_pasteAndGo":
                return document.commandDispatcher
                               .getControllerForCommand("cmd_paste")
                               .isCommandEnabled("cmd_paste");
            }
            return false;
          }.bind(this),
          doCommand: function(aCommand) {
            switch (aCommand) {
              case "cmd_copy":
              case "cmd_cut":
                var val = this._getSelectedValueForClipboard();
                var controller = this._editItemsController;
                if (!val || !controller.isCommandEnabled(aCommand))
                  return;

                Components.classes["@mozilla.org/widget/clipboardhelper;1"]
                          .getService(Components.interfaces.nsIClipboardHelper)
                          .copyString(val);

                if (aCommand == "cmd_cut")
                  goDoCommand("cmd_delete");
                break;

              case "cmd_pasteAndGo":
                this.select();
                goDoCommand("cmd_paste");
                this._fireEvent("textentered", "pasting");
                break;
            }
          }.bind(this),
          onEvent: function(aEventName) {}
        })
      ]]></field>
    </implementation>

    <handlers>
      <handler event="keypress"
               key="&locationBar.accesskey;"
               modifiers="access"
               action="this.select();"/>

      <handler event="ValueChange"><![CDATA[
        if (this._formattingEnabled && !this.focused)
          this._formatValue(true);
      ]]></handler>

      <handler event="blur"><![CDATA[
        if (this._formattingEnabled)
          this._formatValue(true);
      ]]></handler>

      <handler event="focus"><![CDATA[
        this._formatValue(false);
      ]]></handler>
    </handlers>
  </binding>

  <binding id="input-box-paste" extends="chrome://global/content/bindings/textbox.xml#input-box">
    <content context="_child">
      <children/>
      <xul:menupopup anonid="input-box-contextmenu"
                     class="textbox-contextmenu"
                     onpopupshowing="var input =
                                       this.parentNode.getElementsByAttribute('anonid', 'input')[0];
                                     if (document.commandDispatcher.focusedElement != input)
                                       input.focus();
                                     this.parentNode._doPopupItemEnabling(this);"
                     oncommand="var cmd = event.originalTarget.getAttribute('cmd'); if(cmd) { this.parentNode.doCommand(cmd); event.stopPropagation(); }">
        <xul:menuitem label="&undoCmd.label;" accesskey="&undoCmd.accesskey;" cmd="cmd_undo"/>
        <xul:menuseparator/>
        <xul:menuitem label="&cutCmd.label;" accesskey="&cutCmd.accesskey;" cmd="cmd_cut"/>
        <xul:menuitem label="&copyCmd.label;" accesskey="&copyCmd.accesskey;" cmd="cmd_copy"/>
        <xul:menuitem label="&pasteCmd.label;" accesskey="&pasteCmd.accesskey;" cmd="cmd_paste"/>
        <xul:menuitem label="&pasteGoCmd.label;" accesskey="&pasteGoCmd.accesskey;" cmd="cmd_pasteAndGo"/>
        <xul:menuitem label="&deleteCmd.label;" accesskey="&deleteCmd.accesskey;" cmd="cmd_delete"/>
        <xul:menuseparator/>
        <xul:menuitem label="&selectAllCmd.label;" accesskey="&selectAllCmd.accesskey;" cmd="cmd_selectAll"/>
      </xul:menupopup>
    </content>
  </binding>

</bindings>
